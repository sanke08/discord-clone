// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @unique @default(cuid())
  name     String
  email    String   @unique
  password String
  avatar   String?
  Server   Server[]
  Member   Member[]
}

model Server {
  id        String    @id @unique @default(cuid())
  name      String
  imgUrl    String
  inviteUrl String
  ownerId   String
  Owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Member    Member[]
  Channel   Channel[]
}

enum ROLE {
  ADMIN
  GUEST
  MODERATOR
}

model Member {
  id                     String          @id @unique @default(cuid())
  userId                 String
  user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  role                   ROLE
  serverId               String
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  Channel                Channel[]
  Message                Message[]
  DirectMessage          DirectMessage[]
  Conversation           Conversation[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")

  @@index([userId])
  @@index([serverId])
}

enum CHANNEL_TYPE {
  TEXT
  VIDEO
  AUDIO
}

model Channel {
  id        String       @id @unique @default(cuid())
  name      String
  type      CHANNEL_TYPE
  memberId  String
  member    Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Message   Message[]

  @@index([memberId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]
  Member         Member?         @relation(fields: [memberId], references: [id])
  memberId       String?

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
